<!--
  #%L
  Wildfly Camel :: Example :: Camel JPA Spring
  %%
  Copyright (C) 2013 - 2017 RedHat
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/jee
                           http://www.springframework.org/schema/jee/spring-jee.xsd
                           http://camel.apache.org/schema/spring
                           http://camel.apache.org/schema/spring/camel-spring.xsd">

    <jee:jndi-lookup id="transactionManager" jndi-name="java:/TransactionManager"/>

    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="camel"/>
    </bean>

    <bean id="jpa" class="org.apache.camel.component.jpa.JpaComponent">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <property name="transactionManager" ref="jtaTransactionManager" />
    </bean>

    <!--
        Simple route to consume customer record files from directory input/customers,
        unmarshall XML file content to a Customer entity and then use the JPA endpoint
        to persist the it an in-memory datasource named 'ExampleDS' datasource.
    -->
    <camelContext xmlns="http://camel.apache.org/schema/spring" id="jpa-camel-context">
        <route>
            <from uri="file://{{jboss.server.data.dir}}/customers" />
            <unmarshal>
                <jaxb contextPath="org.wildfly.camel.examples.jpa.model" />
            </unmarshal>
            <to uri="jpa:org.wildfly.camel.examples.jpa.model.Customer" />
            <to uri="log:input?showAll=true" />
            <to uri="file://{{jboss.server.data.dir}}/customers/processed" />
        </route>
    </camelContext>
</beans>